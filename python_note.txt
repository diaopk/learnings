Muti-line Statements
    total = item_one + \
        item_two + \
        item_three
Comments
	use #, 

Modules:
    * It is a group of funcitions and convinient for others to use
    * Using a module we use import 
    * We can use a specified function by using from function_name 
      import module_name
    * Some useful modules
        - string : String utilities
        - datetime : fot manipulating dates and times
        - math : Math functions
        - pickle : For saving and restoring data structures on 
          files
        - utllib.request : For reading web pages
        - tkinter : For creating grapgical user interface
        - pygame : For creating python game
        - email : to work with stuff abuot emails
        - re : provide functions about regular expression
        -

    * To install a new module by using [sudo zypper in 
      python-module_name]
        - or, download a python package that you want to install, 
          then tar it and cd into the folder. 
          run sudo python setup.py install

DataType
    * number :
  
    * List : a = [1, 2, 4, 3] : this is the data structure to store a 
      sequence of data in any data type
      - get the exact index of list by using listname[index], [0] is the 
          first element and [-1] is the last element.
	    - asignment for exact index of a list can be possible by using 
          normal assignment syntax
	    - two-lists addition achieved by '+'
	    - remove an element from a list by using pop(index), by default 
          remove the last element, list.pop()
          OR del list[index].
	    - Add elements to a list by using insert(element_one, element_two,
          ...) after the list's name
	    - index of -1 is the last element 
        - len : Length of a list
        - [1, 2, 3] + [4, 5, 6]
        - more built-in functions check: 
          https://www.tutorialspoint.com/python/python_lists.htm
        
        - Built-in functions
            - append() : Appends object to list
            - count() : 
            - extend() : Appends the content of seq to list
            - index() : Returns the lowest index in the list that obj 
              appears
            - insert(index, obj)
            - pop(obj=list[-1]) : Removes and returns last object or obj 
              from list
            - remove(obj) : 
            - reverse() : 

        - Nested List
            - nested_list = [row[i] for row in range[1,2,3] 
                            for i in range[1,2,3]]
  
  * tuple : looks like a list, but without brackets
    - assignment : tuple = 1, 2, 3.
      Getting the access to the element : tuple[0] = 1
    - Re-assignment is not possible to a tuple because tuple is 
      immutable

  * Strings : s = 'This is a string'
	- string is the sequence of characters
	- we can get the exact index of the a string by using string[index]
      . the index should not be out the range of the string
	- get the length of a string by using len(string) function
	- Some examples:
		string[0:] : get characters from the first one
		string[0:11] : get characters from 0 to the 11th
		string[12:] : get the rest of the characters after the 12th
	- Find the position of a letter by using find(), if not found it 
      will return -1
    - Special Operators
        + : Concatenation
        * : Reprtition
        not in, in : return Boolean value
        % : Performs String formatting
            %c : charcter
            %i, %d : signed decimal integer

    - Built-in String functions
        - encode(), decode()
        
  * set : set is an unordered collection of unique items
    It can change the order of item inside the set automatically

    * Dictionary : Python's dictinaries are knid of hash table type.
        They work like associative arrays or hashes found in Perl and 
        consist of key-value pairs. A dictionary key can be almost any 
        Python type, but are usually numbers or strings. Values, can be 
        arbitary Python object.
        
        For example: 
            dict = {}
            dict['one'] = 'This is one'
            dict[2] = 'This is two'
            dict = {'name': 'john', 'code': 1234}

            dict{[('Junli', 2902322), ('Yingzhi', 2928501)]}
            dict(junli=2902322, yingzhi=2928501)
            {x: x+2 for x in range(10)}

        - There are two important points to remember
            - Duplicate key is not allowed. When duplicate keys
              encountered during assignment, the last 
              assignment wins
            - Keys must be immutable. Which means you can use
              string, numbers or tuples as dictinaty keys but
              something like ['key'] is not allowed.

        - Built-in functions
            - keys() to get all the keys
            - values() to get all the values
            - clear() : Removes all elements of a dictionary
            - copy() : Returns a shallow copy of a dictionary
            - fromkeys() : Creates a new dictionary with keys from seq and
              values set to value
            - dict.get(key, default=None) : For key, returns value or 
              default if key not in dictionary
            - has_key(key) : Returns true if key in dictionary, false 
              otherwise
            - items() : Returns a list of dict's (key, value) tuple pairs
            - updte(dict2) : Adds dicitionary dict2's key-value pairs to 
              dict

Loops
	* for $variable in range(x, x):
		[expression]

        - for i, x in zip(range(3), range(3,6)):
            print i, x
	
	* if [condtion]:(colon)
		[expression]

	* if [condtion_one] and [condtion_two]:
		[expression]
	
	* if not ([condtion_one] or [condtion_two]):
		[expression]
	
	* if [condtion]:
		[expression]
	else:
		[expression]

    * if condition:
    expressions
      elif expression:
    statements
      else:
    statements
	
	* while [condtion]:
		if condtion:
			break

    * loop over two or more sequences
        for x, y in zip(list_one[], list_two):
            do_something
    * We can use keyword 'pass' to skip the loop for a specific condition

Funcition
	* Decription
		- A function starts with keyword 'def', and followed by the
          function name. it can take data in any datatype. It does
          not need to write the data type before the parameter

        - Sometimes in the function defination we can see *arg or **kn
          *arg means that this it allows u to pass a number of arguments
          to the function
          for example:
            def test_print(*arg):
                for arg in arg:
                    print arg

            text_print('what', 'the', 'heck')

          this concept does not limit the number of arguments to be passed

          **kn means that a function only receive the dict as the argument
          and kn must be shown when calling the function, which means 
          keyword arguments

        - Unpacking Argument lists
            - Using *
                When the arguments are already in a list or tuple but need 
                to be unpacked for a function call.
                range(0, 10) - list from 0 to 9
                numbers = [0, 10]
                range(*numbers) - list from 0 to 9 # Use * to unpack the 
                                                # the argument
            - Using **
                Sometimes we can use ** to unpack the dict's keyword args
                for a function.

                def parrot(vlotage, state='a stiff', action='voom'):
                    print ...

                d = {"voltage": "four millsion", "state": "bleedin", 
                "action": "voom"}

                parrot(**d)
              

		- Example
			def say_hello(times):
				for 0 in range(0, times):
					print('Hello')
		- It can have the returned data in the end of the function 
          by using return [somethingToReturn]
        - In a function, it can return multiple values
            For example
            def maxnmin(number):
                                number.sort()
                                return (number[0], number[-1])

            min, max = maxnmin(number)
    - Keyword
        Python supports the creation of anonymous functions, is
        often used in conjunction with typcial functional concepts
        like filter(), map() and reduce()

        for example:
        g = lambda x: x * 2
        g(2) is 4

        def make_incrementor (n): return lambda x: x * 2
        g = make_incrementor(4)
        g(3) is 7

        is the same as g(4)(3)
        this is similar with the nested functions in Scala

* Lambda
    - for example:
        squares = []
        for x in range(10):
            squares.append(x**2)

        squares = [x**2 for x in range(10)]

        squares = map(lambda x: x**2, range(10))

Exception
    * Syxtax
        try:
        except Exception:
        else:
        finally:

Object Orientation
    * attention:
        - __class__ to be used to find out the class of an object
        - __init__(self) is the object constructor that must have 
          the parameter called self. More importantly, every 
          functions in a class should self parameter in first 
          position of parameters. Moreover, it would be wrong to
          call it a constructor.
            For example
            class haha:
                def __init__(self, say):
                    self.say = say

        - __del__() is the destrucotr. It is called when the 
          instance is about to be destroyed. This can be 
          overrided.

        - Data Encapsulation
            Name    Noatation   Behaviour
            name    Public      Can be accessed from inside and ouside
            _name   Protected   Like a public member, but they 
                                shouldn't be directly accesed from 
                                outside
            __name  private     Can't be seen and accessed from outside

        - 

    * Inheritance
        - class attributes should be stored in init method.
        - Example (I think this is a very good example of oop)
            class Counter(object):
                number = 0
                def __init__(self):
                    type(self).number += 1
                def __del__(self):
                    type(self).number -= 1

            class Account(Counter):
                def __init__(self, balance):
                    self.balance = balance
                    Counter.__init__(self)

            class Employee(Account):
                def __init__(self, balance):
                    self.Account.__init__(balance)

* Iterator object
    Some_definitions:
        - Iterator : is an object that satisfies(implements) the iterator
          protocol
        - Iterator protocol : An object implements the iterator protocol if
          it implements both a next() and an __iter__() method which 
          satisfy these:
            - the __iter__() method must return the iterator
            - the next() method should return the next item to be iterated
              over and when finished(there are no more items) should raise 
              the StopIteration exception. The iterator protocol is 
              described at Iterator Types
        - Iterator class : A class that implements the iterator protocol.
        - Iterator generator function : A function or method which, when
          called, returns an iterator object, that is, an object that 
          satisfies the iterator protocol. A function containing a yield
          statement automatically becomes a generator.
        - Generator expressions : An expression which produces an iterator
          object. Generator expressions have a form similar to a list 
          comprehension, but are enclosed in parentheses rather than square
          brackets.

    - Examples:
        def generateItems(seq):
            for item in seq:
                yield item

* Reading and Writing Files
    - open(filename, mode) returns a file object.
      - filename and mode are string arguments.
      - In mode, r to read a file, w for only writing a file, 'a' to 
        open a file for appending. 'r+' to open a file for reading and 
        writing

        for example:
        with open('filename') as file:
        # do something

* Modules
    * json
        - dump() : dump json into file/socket
        - dumps() : want json a string for printing, parsing(dump 
          string)
          In python, those can encode baisc python object.
        - loads() : takes a json object in string and converts it
          into phton object(load string)
        - load() : take a file-like object containing json document
          and converts it into python object
    
    * urllib3
        - urllib3.PoolManager() : setup a connection pool

    * certifi
        - Providing a vertifies certificated valuation
          http = urllib3.PoolManager(
          cert_reqs='CERT_REQUIRED', 
          ca_certs=certifi.where())

    * requests

    * BeautifulSoup4
      

* Some built-in and useful methods
    type() : to check the python object type
        - type('') is str
    open() : open a file-like obejct
    read()
    enumerate(list[]) : looping and returning the list values with its 
                        index
    dir() : list the variables have been defined

* Some __xx__ stuff
    - __doc__: the docString
    - __name__: the script name
